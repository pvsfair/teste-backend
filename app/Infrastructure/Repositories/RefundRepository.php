<?php

namespace App\Infrastructure\Repositories;

use App\Domain\Repositories\IPersonRepository as IPerson;
use App\Domain\Repositories\IRefundRepository;
use App\Infrastructure\Repositories\PersonRepository as Person;
use Jenssegers\Mongodb\Eloquent\Model;

class RefundRepository extends Model implements IRefundRepository
{
    protected $table = "refunds"; // não se aplica ao mongodb, pq ficará dentro do arquivo de persons

    protected $fillable = ['type', 'description', 'value', 'date'];

    protected $dates = ['date', 'created_at', 'updated_at'];

    protected $dateFormat = 'Y-m-d\TH:i:sP';

    protected $ensureNumber = ['value'];

    public function setAttribute($key, $value)
    {
        if(in_array($key, $this->ensureNumber) && $value){
            $value = doubleval($value);
        }
        return parent::setAttribute($key, $value); // TODO: Change the autogenerated stub
    }

    public function find($id)
    {
        $refundss = Person::all()->pluck('refunds');
        foreach ($refundss as $refunds) {
            foreach ($refunds as $refund) {
            if($refund->_id == $id)
                return $refund;
            }
        }
    }

    public function getAll()
    {
        $refunds = Person::all()->pluck('refunds');
        $allRefunds = collect();
        foreach ($refunds as $refund) {
            $allRefunds = $allRefunds->merge($refund);
        }
        return $allRefunds->all();
    }

//    public function create(IPerson $person)
//    {
//        // TODO: Implement create() method.
//    }

    public function getStoringValidationData(): array
    {
        return [
            'date' => 'required|date|date_format:Y-m-d\TH:i:sP',
            'type' => 'required|string',
            'description' => 'required|string',
            'value' => 'required|numeric',
        ];
    }

    public function getUpdatingValidationData(): array
    {
        return [
            'value' => 'required|numeric',
        ];
    }

    public static function storeRefundOn(IPerson $person, array $refundOpt)
    {
        $refund = new RefundRepository();
        $refund->fill($refundOpt);
        if ($person instanceof Model) {
            $person->refunds()->associate($refund);
        }
        return $refund;
    }

    public function updateRefund($refund, array $options)
    {
        $refund->fill($options);
        $refund->save();
    }

    public function removeRefund($refund)
    {
        $refund->delete();
    }
}
